name: Terraform CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  AWS_REGION: "us-east-1"
  TF_WORKING_DIR: "./terraform"

permissions:
  id-token: write
  contents: read

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.3

      - name: Run TFLint
        run: |
          tflint --init
          tflint --format compact
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_WORKING_DIR }}
          skip_check: "CKV_AWS_378,CKV2_AWS_12,CKV_AWS_260,CKV_AWS_135,CKV_AWS_91,CKV_AWS_2"
          soft_fail: true

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ${{ env.TF_WORKING_DIR }}/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init & Plan
        run: |
          terraform init -upgrade
          terraform plan -out=tfplan
          terraform show -json tfplan > plan.json
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Install Infracost
        run: |
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          infracost --version

      - name: Cache Infracost CLI
        uses: actions/cache@v3
        with:
          path: ~/.local/bin/infracost
          key: infracost-cli-${{ hashFiles('**/terraform/*.tf') }}

      - name: Generate Cost Estimate
        if: ${{ secrets.INFRACOST_API_KEY != '' }}
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: |
          infracost breakdown \
            --path=${{ env.TF_WORKING_DIR }}/plan.json \
            --format=github-comment \
            --show-skipped
        continue-on-error: true

      - name: Comment Infracost results on PR
        if: ${{ github.event_name == 'pull_request' && secrets.INFRACOST_API_KEY != '' }}
        uses: infracost/infracost-gh-action@v2
        with:
          path: ${{ env.TF_WORKING_DIR }}/plan.json
          github-token: ${{ secrets.GITHUB_TOKEN }}

  terraform:
    name: Deploy & Test
    runs-on: ubuntu-latest
    needs: [security-scan, cost-analysis]
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init -upgrade
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' }}
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Health Check ALB
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
          if [ -n "$ALB_DNS" ]; then
            echo "Running ALB health check..."
            curl -Is http://$ALB_DNS/ | head -n 1
          else
            echo "No ALB output found."
          fi
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Wait for 10 minutes before cleanup
        if: ${{ github.ref == 'refs/heads/main' }}
        run: sleep 600

      - name: Terraform Destroy
        if: ${{ github.ref == 'refs/heads/main' }}
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}
